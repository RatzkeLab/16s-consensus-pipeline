# implicit import of common.smk for helpers and shared globals

rule filter_reads:
    input:
        raw = str(INPUT_DIR / "{sample}.fastq.gz")
    output:
        filtered = temp(str(FILTER_DIR / "{sample}.filtered.fastq.gz")),
        qc = str(QC_DIR / "filter" / "{sample}.json")
    params:
        min_len = config["filter"]["min_length"],
        max_len = config["filter"]["max_length"],
        min_q = config["filter"]["min_avg_qscore"],
    log:
        str(LOG_FILTER / "{sample}.log")
    conda: "../envs/filter.yaml"
    shell:
        r"""
        set -euo pipefail
        mkdir -p "$(dirname {output.filtered})" "$(dirname {output.qc})" "$(dirname {log})"
        gzip -cd {input.raw} \
        | NanoFilt --length {params.min_len} --maxlength {params.max_len} --quality {params.min_q} 2> {log} \
        | gzip -c > {output.filtered}
        # Simple QC JSON: counts are generated by a downstream small script if needed
        echo '{{"input":"{input.raw}","output":"{output.filtered}"}}' > {output.qc}
        """

